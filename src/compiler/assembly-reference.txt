main:
	mov r0, 1     // The accumulator for the exponent
	mov r1, 2     // The base, i.e. "2" in 2^4
	mov r2, 4     // The exponent, i.e. "4" in 2^4
	bl exponent   // r0 = r1 ^ r2
	mov r3, 5     // Arbitrary code to check 
	mov r4, 6     // branching back after subroutine
	b finish      // Skip exponent subroutine
exponent:
	// r0 = r1 ^ r2
	cmp r2, 0
	//it eq
	//bxeq lr
	beq branchToLR
	mul r0, r1
	sub r2, 1
	b exponent
branchToLR:
	bx lr
finish:
	nop

1. Have expression - (+ (- (* 1 2) 3) (+ 4 5))
2. Push each to stack in reverse polish notation
3. 1 2 * 3 - 4 5 + +
4. Do the following for each item:
	if NUMBER, PUSH
	if BINARY, POP x2 AND PUSH RESULT
	if UNARY,  POP x1 AND PUSH RESULT


PUSHING
=======
1 2 +
mov r0, 1		-- Store 1
push {r0}		-- Push 1
mov r1, 2		-- Store 2 (Note that it's in different register)
push {r1}		-- Push 2
pop {r0, r1}	-- Pop 1 and 2
add r0, r1		-- Add together, accumulate in r0
push {r0}		-- Push r0
